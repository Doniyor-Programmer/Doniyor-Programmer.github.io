{"version":3,"file":"static/js/812.1d8fb7c7.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import {useState, useEffect} from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport {setContent} from \"../../utils/setContent\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n  const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const onCharLoaded = char => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({data}) => {\n  const {name, description, thumbnail, homepage, wiki} = data;\n  let imgStyle = {objectFit: \"cover\"};\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = {objectFit: \"contain\"};\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import {useState, useEffect, useRef, useMemo} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport {setContent2} from \"../../utils/setContent\";\n\nimport \"./charList.scss\";\n\nconst CharList = props => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setnewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const {getAllCharacters, process, setProcess} = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setnewItemLoading(false) : setnewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharListLoaded = async newCharList => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n    setCharList([...charList, ...newCharList]);\n    setnewItemLoading(false);\n    setOffset(offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = id => {\n    itemRefs.current.forEach(item =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = {objectFit: \"cover\"};\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = {objectFit: \"unset\"};\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={el => (itemRefs.current[i] = el)}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={e => {\n              if (e.key === \" \" || e.key === \"Enter\") {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const elements = useMemo(() => {\n    return setContent2(process, () => renderItems(charList), newItemLoading);\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        disabled={newItemLoading}\n        style={{display: charEnded ? \"none\" : \"block\"}}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n};\n\nexport default CharList;\n","import {useState, useEffect} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport {setContent} from \"../../utils/setContent\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = props => {\n  const [char, setChar] = useState(null);\n\n  const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const {charId} = props;\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharLoaded = char => {\n    setChar(char);\n  };\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({data}) => {\n  const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n  let imgStyle = {objectFit: \"cover\"};\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = {objectFit: \"contain\"};\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number\n};\n\nexport default CharInfo;\n","import {useState} from \"react\";\nimport {Formik, Form, Field, ErrorMessage as FormikErrorMessage} from \"formik\";\nimport * as Yup from \"yup\";\nimport {Link} from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./charSearchForm.scss\";\n\nconst CharSearchForm = () => {\n  const [char, setChar] = useState(null);\n  const {getCharacterByName, clearError, process, setProcess} =\n    useMarvelService();\n\n  const onCharLoaded = char => {\n    setChar(char);\n  };\n\n  const updateChar = name => {\n    clearError();\n\n    getCharacterByName(name)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const errorMessage =\n    process === \"error\" ? (\n      <div className=\"char__search-critical-error\">\n        <ErrorMessage />\n      </div>\n    ) : null;\n  const results = !char ? null : char.length > 0 ? (\n    <div className=\"char__search-wrapper\">\n      <div className=\"char__search-success\">\n        There is! Visit {char[0].name} page?\n      </div>\n      <Link\n        to={`/characters/${char[0].id}`}\n        className=\"button button__secondary\"\n      >\n        <div className=\"inner\">To page</div>\n      </Link>\n    </div>\n  ) : (\n    <div className=\"char__search-error\">\n      The character was not found. Check the name and try again\n    </div>\n  );\n\n  return (\n    <div className=\"char__search-form\">\n      <Formik\n        initialValues={{\n          charName: \"\"\n        }}\n        validationSchema={Yup.object({\n          charName: Yup.string().required(\"This field is required\")\n        })}\n        onSubmit={({charName}) => {\n          updateChar(charName);\n        }}\n      >\n        <Form>\n          <label className=\"char__search-label\" htmlFor=\"charName\">\n            Or find a character by name:\n          </label>\n          <div className=\"char__search-wrapper\">\n            <Field\n              id=\"charName\"\n              name=\"charName\"\n              type=\"text\"\n              placeholder=\"Enter name\"\n            />\n            <button\n              type=\"submit\"\n              className=\"button button__main\"\n              disabled={process === \"loading\"}\n            >\n              <div className=\"inner\">find</div>\n            </button>\n          </div>\n          <FormikErrorMessage\n            component=\"div\"\n            className=\"char__search-error\"\n            name=\"charName\"\n          />\n        </Form>\n      </Formik>\n      {results}\n      {errorMessage}\n    </div>\n  );\n};\n\nexport default CharSearchForm;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import {useState} from \"react\";\nimport {Helmet} from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from \"../../resources/img/vision.png\";\n\nconst MainPage = () => {\n  const [selectedChar, setChar] = useState(null);\n\n  const onCharSelected = id => {\n    setChar(id);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <meta\n          name=\"keywords\"\n          content=\"Marvel information portal, Marvel info portal\"\n        />\n        <meta name=\"author\" content=\"Doniyor-Programmer\" />\n        <title>Marvel information portal</title>\n        <meta name=\"title\" content=\"Marvel information portal\" />\n        <meta name=\"description\" content=\"Marvel information portal\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta\n          property=\"og:url\"\n          content=\"https://doniyor-programmer.github.io/marvel/index.html\"\n        />\n        <meta property=\"og:title\" content=\"Marvel information portal\" />\n        <meta property=\"og:description\" content=\"Marvel information portal\" />\n        <meta property=\"og:image\" content=\"\" />\n        <meta property=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          property=\"twitter:url\"\n          content=\"https://doniyor-programmer.github.io/marvel/index.html\"\n        />\n        <meta property=\"twitter:title\" content=\"Marvel information portal\" />\n        <meta\n          property=\"twitter:description\"\n          content=\"Marvel information portal\"\n        />\n        <meta property=\"twitter:image\" content=\"\" />\n      </Helmet>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <div>\n          <ErrorBoundary>\n            <CharInfo charId={selectedChar} />\n          </ErrorBoundary>\n          <ErrorBoundary>\n            <CharSearchForm />\n          </ErrorBoundary>\n        </div>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  );\n};\n\nexport default MainPage;\n","import {useHttp} from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const {request, clearError, process, setProcess} = useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=fbe906ac3ec1686f6a40363756bf398b\";\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacterByName = async name => {\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async id => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const res = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async id => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n  };\n\n  const _transformCharacter = char => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 210)}...`\n        : \"There is no description for this character\",\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items\n    };\n  };\n\n  const _transformComics = comics => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} p.`\n        : \"No information about the number of pages\",\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      language: comics.textObjects.language || \"en-us\",\n      price: comics.prices[0].price\n        ? `${comics.prices[0].price}$`\n        : \"not available\"\n    };\n  };\n\n  return {\n    clearError,\n    process,\n    setProcess,\n    getAllCharacters,\n    getCharacterByName,\n    getCharacter,\n    getAllComics,\n    getComic\n  };\n};\n\nexport default useMarvelService;\n","import {useState, useCallback} from \"react\";\n\nexport const useHttp = () => {\n  const [process, setProcess] = useState(\"waiting\");\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = {\"Content-Type\": \"application/json\"}\n    ) => {\n      setProcess(\"loading\");\n\n      try {\n        const response = await fetch(url, {method, body, headers});\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        return data;\n      } catch (e) {\n        setProcess(\"error\");\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => {\n    setProcess(\"loading\");\n  }, []);\n\n  return {request, clearError, process, setProcess};\n};\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component data={data} />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n\r\nconst setContent2 = (process, Component, newItemLoading) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Spinner />;\r\n    case \"loading\":\r\n      return newItemLoading ? <Component /> : <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n\r\nexport {setContent, setContent2};\r\n"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","setContent2","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","charId","getCharacterByName","errorMessage","ErrorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","Component","selectedChar","Helmet","content","property","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices","Spinner"],"sourceRoot":""}